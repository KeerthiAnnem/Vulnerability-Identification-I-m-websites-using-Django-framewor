from django.shortcuts import render, redirect
from django.http import JsonResponse

from zapv2 import ZAPv2
from zapv2.ascan import *
from zapv2.core import *
import time
import json
from django.contrib import messages

from apps.main.models import Report, Alert, Instance

def home(request):
    return render(request, 'main/home.html')

def report(request, pk=None):
    user = request.user
    if pk:
        scan_report = Report.objects.get(id=pk)
        if scan_report.user != user and not user.is_superuser:
            messages.warning(request, "Kindly use the stated method for getting report and no other!")
            return redirect('main:home')
    else:
        scan_report = Report.objects.order_by('-updated_at').first()
    return render(request, 'main/report.html', {
        'report': scan_report
    })

def json_report(request):
    return render(request, 'main/report.json')

 # Set up the ZAP API endpoint and API key
zap = None
report_complete = False

def scan(request):
    global zap
    global report_complete
    zap = ZAPv2(apikey='veerrhpt8ge24a15fgflcudsdf', proxies={'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'})
    report_complete = False

    user = request.user
    if not user.is_authenticated:
        user = None

    # Start a new session
    zap.core.delete_all_alerts()
    zap.core.new_session()

    # Include the target URL to be scanned
    target_url = request.GET.get('target', None)
    if not (target_url[:5] == 'http:' or target_url[:6] == 'https'):
        target_url = f"http://{target_url}"

    # print("Starting scan on:", target_url)

    # Spider the target URL
    zap.spider.scan(target_url)

    # Wait until the spider has finished scanning
    while (int(zap.spider.status()) < 100):
        # print('Spider progress %: ' + str(zap.spider.status()))
        time.sleep(1)

    # print('Spider completed\n')

    # Perform an active scan
    zap.ascan.scan(target_url)

    # Wait until the active scan has finished
    while (int(zap.ascan.status()) < 100):
        # print('Scan progress %: ' + str(zap.ascan.status()))
        time.sleep(1)

    # print('Active Scan completed\n')
    
    report = json.loads(zap.core.jsonreport())    
    sites = report.get('site')
    for site in sites:
        db_report = Report.objects.create(
            user = user,
            site = site.get('@name'),
            host = site.get('@host'),
            port = site.get('@port'),
            ssl = site.get('@ssl'),
            scanned_at = report.get('@generated'),
        )

        alerts = site.get('alerts')
        for alert in alerts:
            db_alert = Alert.objects.create(
                name = alert.get('name'),
                level = alert.get('riskcode'),
                risk_description = alert.get('riskdesc'),
                description = alert.get('desc'),
                cwe_ID = alert.get('cweid'),
                wasc_ID = alert.get('wascid'),
                source_ID = alert.get('sourceid'),
                plugin_ID = alert.get('pluginid'),
                reference = alert.get('reference'),
                other_info = alert.get('otherinfo'),
                solution = alert.get('solution'),
            )
            instances = alert.get('instances')
            for instance in instances:
                db_instance, _ = Instance.objects.get_or_create(
                    url = instance.get('uri'),
                    method = instance.get('method'),
                    parameter = instance.get('parameter'),
                    attack = instance.get('attack'),
                    evidence = instance.get('evidence'),
                )
                db_alert.instances.add(db_instance)
            db_report.alerts.add(db_alert)
    
    report_complete = True

    return JsonResponse("complete", safe=False)

def progress(request):
    try:
        spider_status = int(zap.spider.status())
        spider_complete = False if spider_status < 100 else True
    except:
        spider_complete = False

    try:
        ascan_status = int(zap.ascan.status())
        ascan_complete = False if ascan_status < 100 else True
    except:
        ascan_complete = False

    color = 'dark'
    if spider_complete and ascan_complete:
        color = 'success'
    elif spider_complete:
        color = 'info'

    try:
        if not spider_complete:
            status = f"Spider progress at {spider_status}%"
        elif not ascan_complete:
            status = f"Active scan progress at {ascan_status}%"
        elif spider_complete and ascan_complete and report_complete:
            status = 'complete'
        elif spider_complete and ascan_complete:
            status = "Analysis complete. Compiling results and generating report. This may take some time, hold on...."
    except:
        status = "Working..."

    data = {
        # 'spider_complete': spider_complete,
        # 'spider_status': spider_status,
        # 'ascan_complete': ascan_complete,
        # 'ascan_status': ascan_status,
        'color': color,
        'status': status,
    }
    return JsonResponse(data, safe=False)

def history(request):
    user = request.user
    if not user.is_authenticated:
        messages.warning(request, "You must be logged in to view your history")
    reports = Report.objects.all()
    if not user.is_superuser:
        reports = reports.filter(user=user)
    return render(request, 'main/history.html', {
        'reports': reports
    })